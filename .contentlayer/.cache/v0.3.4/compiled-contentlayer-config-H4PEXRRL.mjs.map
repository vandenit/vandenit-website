{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\n// Author document type\nexport const Author = defineDocumentType(() => ({\n  name: 'Author',\n  filePathPattern: `authors/**/*.md`,\n  contentType: 'markdown',\n  fields: {\n    name: {\n      type: 'string',\n      description: 'The name of the author',\n      required: true,\n    },\n    avatar: {\n      type: 'string',\n      description: 'The avatar image path',\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (author) => `/authors/${author._raw.flattenedPath}`,\n    },\n  },\n}))\n\n// Post document type\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    heroImg: {\n      type: 'string',\n      description: 'The hero image path',\n      required: false,\n    },\n    excerpt: {\n      type: 'string',\n      description: 'The excerpt of the post',\n      required: false,\n    },\n    author: {\n      type: 'string',\n      description: 'Reference to author file',\n      required: false,\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: true,\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Tags for the post',\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/posts/${post._raw.flattenedPath}`,\n    },\n    slug: {\n      type: 'string',\n      resolve: (post) => post._raw.flattenedPath,\n    },\n  },\n}))\n\n// Page document type with blocks support\nexport const Page = defineDocumentType(() => ({\n  name: 'Page',\n  filePathPattern: `pages/**/*.md`,\n  contentType: 'markdown',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the page',\n      required: true,\n    },\n    blocks: {\n      type: 'json',\n      description: 'Page blocks/sections',\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (page) => `/${page._raw.sourceFileName.replace('.md', '')}`,\n    },\n    slug: {\n      type: 'string',\n      resolve: (page) => page._raw.sourceFileName.replace('.md', ''),\n    },\n  },\n}))\n\n// Global configuration document type\nexport const Global = defineDocumentType(() => ({\n  name: 'Global',\n  filePathPattern: `global/**/*.json`,\n  contentType: 'data',\n  isSingleton: true,\n  fields: {\n    header: {\n      type: 'json',\n      description: 'Header configuration',\n      required: false,\n    },\n    footer: {\n      type: 'json',\n      description: 'Footer configuration',\n      required: false,\n    },\n    theme: {\n      type: 'json',\n      description: 'Theme configuration',\n      required: false,\n    },\n  },\n}))\n\n// Theme document type\nexport const Theme = defineDocumentType(() => ({\n  name: 'Theme',\n  filePathPattern: `theme/**/*.json`,\n  contentType: 'data',\n  fields: {\n    data: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Theme data (tags, etc.)',\n      required: false,\n    },\n    _template: {\n      type: 'string',\n      description: 'Template type',\n      required: false,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: './content',\n  documentTypes: [Author, Post, Page, Global, Theme],\n  disableImportAliasWarning: true,\n  mdx: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n})\n"],
  "mappings": "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",
  "names": []
}
