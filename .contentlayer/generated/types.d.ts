// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'
import * as Local from 'contentlayer/source-files'

export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Author = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Author'
  /** The name of the author */
  name: string
  /** The avatar image path */
  avatar?: string | undefined
  /** Markdown file body */
  body: Markdown
  url: string
}

export type Global = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Global'
  /** Header configuration */
  header?: any | undefined
  /** Footer configuration */
  footer?: any | undefined
  /** Theme configuration */
  theme?: any | undefined

}

export type Page = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Page'
  /** The title of the page */
  title: string
  /** Page blocks/sections */
  blocks?: any | undefined
  /** Markdown file body */
  body: Markdown
  url: string
  slug: string
}

export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  /** The title of the post */
  title: string
  /** The hero image path */
  heroImg?: string | undefined
  /** The excerpt of the post */
  excerpt?: string | undefined
  /** Reference to author file */
  author?: string | undefined
  /** The date of the post */
  date: IsoDateTimeString
  /** Tags for the post */
  tags?: string[] | undefined
  /** MDX file body */
  body: MDX
  url: string
  slug: string
}

export type Theme = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Theme'
  /** Theme data (tags, etc.) */
  data?: string[] | undefined
  /** Template type */
  _template?: string | undefined

}  

/** Nested types */
  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Author | Global | Page | Post | Theme
export type DocumentTypeNames = 'Author' | 'Global' | 'Page' | 'Post' | 'Theme'

export type NestedTypes = never
export type NestedTypeNames = never

export type DataExports = {
  allDocuments: DocumentTypes[]
  allAuthors: Author[]
  allPosts: Post[]
  allPages: Page[]
  global: Global
  allThemes: Theme[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Author: Author
  Global: Global
  Page: Page
  Post: Post
  Theme: Theme
}

export type NestedTypeMap = {

}

 